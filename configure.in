dnl +------------------------------------------------------------------+
dnl | Network UPS Tools: configure.in                                  |
dnl +------------------------------------------------------------------+

# NUT version number is defined here and *only* here (no more include/version)
AC_INIT(nut, 2.1.0)
AC_CONFIG_SRCDIR(server/upsd.c)
AC_CANONICAL_SYSTEM
AC_CONFIG_HEADER(include/config.h)
AC_PREFIX_DEFAULT(/usr/local/ups)
AM_INIT_AUTOMAKE

AC_DEFINE_UNQUOTED(UPS_VERSION, "${PACKAGE_VERSION}", [NUT version])

dnl Fix this early so we can expand with eval later
test "${prefix}" = "NONE" && prefix="${ac_default_prefix}"

CFLAGS=${CFLAGS-"-O"}

dnl +------------------------------------------------------------------+
dnl | default values for things later on (can be overridden)           |

STATEPATH="/var/state/ups"

DRVPATH='${prefix}/bin'
CGIPATH='${prefix}/cgi-bin'
HTMLPATH='${prefix}/html'

RUN_AS_USER="nobody"
PIDPATH="/var/run"

dnl Define directory where LIBOBJS replacement functions are
AC_CONFIG_LIBOBJ_DIR([common])

dnl These are only used if gdlib-config is unusable and the user
dnl fails to pass better values in --with arguments

GD_INCLUDES=""
GD_LIBS="-L/usr/X11R6/lib -lgd -lpng -lz -ljpeg -lfreetype -lm -lXpm -lX11"

dnl +-------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_EGREP
AC_PATH_PROG(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_PROG_LIBTOOL
AC_C_INLINE
AC_CHECK_FUNCS(flock lockf fcvt fcvtl)
AC_CHECK_FUNCS(cfsetispeed tcsendbreak)
AC_CHECK_FUNCS(seteuid setsid getpassphrase)
AC_CHECK_FUNCS(on_exit)

dnl the following may add stuff to LIBOBJS
AC_CHECK_FUNCS(vsnprintf snprintf, ,
	[AC_LIBOBJ(snprintf)]
)
AC_REPLACE_FUNCS(setenv inet_aton strerror atexit)

#
# Only use these when compiling with gcc 
#
if ( test "${GCC}" = "yes" )
then
  CFLAGS="${CFLAGS} -Wall -Wsign-compare"
fi  

# Endianness handling, using default behavior
# eg defines WORDS_BIGENDIAN if BigEnd,
# nothing if LittleEnd, abort otherwise
AC_C_BIGENDIAN

# optind handling:
# need to check if unistd.h is enough, else try getopt.h, else need decls
AC_MSG_CHECKING(for getopt declarations)
AC_TRY_COMPILE(
  [#include <unistd.h>],
  [int i = optind;],
  nut_getopt_decl_in_unistd=yes,
  nut_getopt_decl_in_unistd=no)
if test "${nut_getopt_decl_in_unistd}" = "yes"; then
  AC_MSG_RESULT(in unistd.h)
else
  AC_CHECK_HEADER(getopt.h, [have_getopt_h=yes], [have_getopt_h=])
  if test "${have_getopt_h}" = "yes"; then
    AC_DEFINE(NEED_GETOPT_H, 1,
		[Define if getopt.h is needed])
    AC_MSG_RESULT(using getopt.h)
  else
    AC_DEFINE(NEED_GETOPT_DECLS, 1, 
		[Define to use explicit getopt declarations])
    AC_MSG_RESULT(using explicit getopt declarations)
  fi
fi

# FreeBSD serial locking compatibility - look for uu_lock in libutil.h

AC_MSG_CHECKING(whether to use uu_lock)
AC_EGREP_HEADER(uu_lock, libutil.h, [
		AC_MSG_RESULT(yes)
		SERLIBS="-lutil"
		AC_DEFINE(HAVE_UU_LOCK, 1, 
			[Use uu_lock for locking (FreeBSD)])  

		# put in some better defaults for FreeBSD
		RUN_AS_USER="uucp"
],[
		AC_MSG_RESULT(no)
		SERLIBS=""
])	

# Solaris compatibility - check for -lnsl and -lsocket if connect() is gone

AC_CHECK_FUNCS(connect)

if ( test "${ac_cv_func_connect}" = "no" ); then
	AC_CHECK_LIB(nsl, printf, [
	  	NETLIBS="-lnsl"
	], [], [])

	AC_CHECK_LIB(socket, printf, [
		NETLIBS="${NETLIBS} -lsocket"
	], [], [])
fi

AC_CHECK_HEADERS(sys/modem.h stdarg.h varargs.h sys/termios.h)

AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h)

dnl Check for types and define possible replacements
TYPE_SOCKLEN_T
TYPE_UINT16_T
TYPE_UINT8_T

dnl ----------------------------------------------------------------------
dnl check for SSL compiler flags

AC_MSG_CHECKING(for SSL library availability)

CFLAGS_ORIG="${CFLAGS}"
LDFLAGS_ORIG="${LDFLAGS}"

SSL_CFLAGS=""
SSL_LDFLAGS="-lssl -lcrypto"

CFLAGS="${SSL_CFLAGS}"
LDFLAGS="${SSL_LDFLAGS}"
AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init()], ssl_ok=yes, ssl_ok=no)

if test "${ssl_ok}" != "yes"; then
	SSL_CFLAGS="-I/usr/local/ssl/include"
	SSL_LDFLAGS="-L/usr/local/ssl/lib -lssl -lcrypto"

	CFLAGS="${SSL_CFLAGS}"
	LDFLAGS="${SSL_LDFLAGS}"
	AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init], ssl_ok=yes, ssl_ok=no)
fi

if test "${ssl_ok}" != "yes"; then
	SSL_CFLAGS="-I/usr/local/ssl/include -I/usr/kerberos/include"
	SSL_LDFLAGS="-L/usr/local/ssl/lib -lssl -lcrypto"

	CFLAGS="${SSL_CFLAGS}"
	LDFLAGS="${SSL_LDFLAGS}"
	AC_TRY_LINK([#include <openssl/ssl.h>], [SSL_library_init], ssl_ok=yes, ssl_ok=no)
fi

CFLAGS="${CFLAGS_ORIG}"
LDFLAGS="${LDFLAGS_ORIG}"

AC_MSG_RESULT([${ssl_ok}])

AC_MSG_CHECKING(whether to enable SSL development code)
AC_ARG_WITH(ssl,
AC_HELP_STRING([--with-ssl], [enable SSL development code (default: no)]),
[	case "$withval" in
	yes)
		AC_MSG_RESULT(yes)

		if test "${ssl_ok}" != "yes"; then
			AC_MSG_ERROR(["SSL support requested, but OpenSSL not found"])
		fi

		AC_DEFINE(HAVE_SSL, 1, 
			[Define to enable SSL development code])
		;;
	*)
		AC_MSG_RESULT(no)
		;;
	esac],

	AC_MSG_RESULT(no)
)	

dnl See if gdlib-config is out there and usable

AC_MSG_CHECKING(for gd version via gdlib-config)

GD_VERSION=`gdlib-config --version 2>/dev/null`
if (test "$?" != "0")
then
	GD_VERSION="unknown"
	AC_MSG_RESULT(not found)
else
	AC_MSG_RESULT(${GD_VERSION})
fi

case "${GD_VERSION}" in
	unknown)
		;;

	2.0.5 | 2.0.6 | 2.0.7)
		AC_MSG_WARN([[gd ${GD_VERSION} detected, unable to use gdlib-config script]])
		AC_MSG_WARN([[If gd detection fails, upgrade gd or use --with-gd-libs]])
		;;

	*)
		GD_LIBS="`gdlib-config --ldflags` `gdlib-config --libs` -lgd"
		GD_INCLUDES="`gdlib-config --includes`"
		;;
	esac

dnl Now allow overriding gd settings if the user knows best

AC_MSG_CHECKING(for gd include flags)
AC_ARG_WITH(gd-includes,
AC_HELP_STRING([--with-gd-includes=FLAGS], [include flags for the gd library]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT([using defaults])
		;;
	*)
		AC_MSG_RESULT([using ${withval}])
		GD_INCLUDES="${withval}"
		;;
	esac],

	AC_MSG_RESULT(using defaults)
)

AC_MSG_CHECKING(for gd library flags)
AC_ARG_WITH(gd-libs,
AC_HELP_STRING([--with-gd-libs=FLAGS], [linker flags for the gd library]),
[	case "$withval" in
	yes|no)
		AC_MSG_RESULT([using defaults])
		;;
	*)
		AC_MSG_RESULT([using ${withval}])
		GD_LIBS="${withval}"
		;;
	esac],

	AC_MSG_RESULT(using defaults)
)

dnl +------------------------------------------------------------------+
dnl | Check for libraries used by the CGI programs.                    |
dnl +------------------------------------------------------------------+

dnl Note: we do this even if --with-cgi isn't selected; the user
dnl can still build the CGI programs with "make cgi". 

CFLAGS_ORIG="${CFLAGS}"
CPPFLAGS_ORIG="${CPPFLAGS}"
LDFLAGS_ORIG="${LDFLAGS}"

		CFLAGS="${GD_INCLUDES}"
		CPPFLAGS="${GD_INCLUDES}"
		LDFLAGS="${GD_LIBS}"

		AC_CHECK_HEADERS(gd.h)
		AC_CHECK_LIB(gd, gdImagePng, 
		have_libgc=1
		AC_DEFINE(HAVE_LIBGD, 1, 
			[Define if you have Boutell's libgd installed]),
		,
		${GD_LIBS})

dnl put back the original versions
CFLAGS="${CFLAGS_ORIG}"
CPPFLAGS="${CPPFLAGS_ORIG}"
LDFLAGS="${LDFLAGS_ORIG}"

AC_MSG_CHECKING(for --with-all)
AC_ARG_WITH(all,
AC_HELP_STRING([--with-all], [enable cgi, lib, serial, snmp, usb (no)]),
[	if test "${withval}" = "yes"; then
		with_cgi=yes
		with_lib=yes
		with_serial=yes
		with_snmp=yes
		with_usb=yes
		AC_MSG_RESULT(yes)		
	else
		AC_MSG_RESULT(no)
	fi
], [		AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(whether to build CGI programs)
AC_ARG_WITH(cgi,
AC_HELP_STRING([--with-cgi], [build and install the CGI programs (no)]),
[	case "${withval}" in
	yes)

		AC_MSG_RESULT(yes)
		nut_with_cgi="yes"
		if test "${have_libgc}" != "1"; then
		   AC_MSG_ERROR([libgd not found, required for CGI build])
		fi
		;;	
	no|*)
		AC_MSG_RESULT(no)
		nut_with_cgi="no"
		;;
	esac],
[
	AC_MSG_RESULT(no)
        nut_with_cgi="no"
]
)
AM_CONDITIONAL(WITH_CGI, test "${nut_with_cgi}" = "yes")

AC_MSG_CHECKING(whether to build upsclient library)
AC_ARG_WITH(lib,
AC_HELP_STRING([--with-lib], [build and install the upsclient library (no)]),
[	case "${withval}" in
	yes)

		AC_MSG_RESULT(yes)
		nut_with_lib=yes
		;;	
	no|*)
		AC_MSG_RESULT(no)
		nut_with_lib=no
		;;
	esac],
[
	AC_MSG_RESULT(no)
	nut_with_lib=no
]
)
AM_CONDITIONAL(WITH_LIB, test "${nut_with_lib}" = "yes")

dnl Check for Net-SNMP libs and flags
# innocent until proven guilty
nut_have_net_snmp=yes
AC_MSG_CHECKING(for Net-SNMP cflags)
NETSNMP_CFLAGS=`net-snmp-config --cflags 2>/dev/null`

if (test "$?" != "0")
then
	AC_MSG_RESULT([not found])
	nut_have_net_snmp=no
else
	AC_MSG_RESULT([${NETSNMP_CFLAGS}])
fi

AC_MSG_CHECKING(for Net-SNMP libs)
NETSNMP_LIBS=`net-snmp-config --libs 2>/dev/null`

if (test "$?" != "0")
then
	AC_MSG_RESULT([not found])
	nut_have_net_snmp=no
else
	AC_MSG_RESULT([${NETSNMP_LIBS}])
fi
AM_CONDITIONAL(HAVE_NET_SNMP, test "${nut_have_net_snmp}" = "yes")

dnl ----------------------------------------------------------------------
dnl check for --with-serial, --with-snmp, --with-usb

AC_MSG_CHECKING(whether to compile serial drivers)
AC_ARG_WITH(serial,
AC_HELP_STRING([--with-serial], [build and install serial drivers (yes)]),
[	case "${withval}" in
	no)
		with_serial=no
		;;
	yes|*)
		with_serial=yes
		;;
	esac],
	with_serial=yes
)
AC_MSG_RESULT(${with_serial})
AM_CONDITIONAL(WITH_SERIAL, test "${with_serial}" = "yes")

AC_MSG_CHECKING(whether to compile SNMP drivers)
AC_ARG_WITH(snmp,
AC_HELP_STRING([--with-snmp], [build and install SNMP drivers (no)]),
[	case "${withval}" in
	yes)
		with_snmp=yes
		;;
	no|*)
		with_snmp=no
		;;
	esac],
	with_snmp=no
)
AC_MSG_RESULT(${with_snmp})
AM_CONDITIONAL(WITH_SNMP, test "${with_snmp}" = "yes")

dnl give up if user requested SNMP drivers but we cannot compile them.
if test "${with_snmp}" = "yes" -a "${nut_have_net_snmp}" != "yes"; then
   AC_MSG_ERROR([SNMP drivers requested but Net-SNMP libraries not found])
fi

AC_MSG_CHECKING(whether to compile USB drivers)
AC_ARG_WITH(usb,
AC_HELP_STRING([--with-usb], [build and install USB drivers (no)]),
[	case "${withval}" in
	yes)
		with_usb=yes
		;;
	no|*)
		with_usb=no
		;;
	esac],
	with_usb=no
)
AC_MSG_RESULT(${with_usb})
AM_CONDITIONAL(WITH_USB, test "${with_usb}" = "yes")

dnl ----------------------------------------------------------------------
dnl USB-related checks

# innocent until proven guilty
nut_have_libusb=yes

dnl Check for libusb libs and flags
AC_MSG_CHECKING(for libusb cflags)
LIBUSB_CFLAGS=`libusb-config --cflags 2>/dev/null`
if (test "$?" != "0")
then
	AC_MSG_RESULT(not found)
	nut_have_libusb=no
else
	AC_MSG_RESULT(${LIBUSB_CFLAGS})
fi

AC_MSG_CHECKING(for libusb libs)
LIBUSB_LIBS=`libusb-config --libs 2>/dev/null`
if (test "$?" != "0")
then
	AC_MSG_RESULT(not found)
	nut_have_libusb=no
else
	AC_MSG_RESULT(${LIBUSB_LIBS})
fi
AM_CONDITIONAL(HAVE_LIBUSB, test "${nut_have_libusb}" = "yes")

dnl Check for libusb "force driver unbind" availability
dnl Need at least libusb 0.1.8
AC_CHECK_LIB(usb, usb_detach_kernel_driver_np, [
		AC_DEFINE(LIBUSB_HAS_DETACH_KRNL_DRV, 1,
			[Define to 1 if libusb support `usb_detach_kernel_driver_np' function.])
	], [], [])

AC_MSG_CHECKING(for Linux hiddev.h)
AC_ARG_WITH(linux-hiddev,
AC_HELP_STRING([--with-linux-hiddev=FILE], [linux hiddev.h location (/usr/include/linux/hiddev.h)]),
[	case "${withval}" in
	yes)
		linux_hiddev="/usr/include/linux/hiddev.h"
		;;
	no)
		linux_hiddev=
		;;
	*)
		linux_hiddev="${withval}"
		;;
	esac],
[
	linux_hiddev="/usr/include/linux/hiddev.h"
]
)

if test -z "${linux_hiddev}"; then
	AC_MSG_RESULT(no)
elif test -f "${linux_hiddev}"; then
	AC_MSG_RESULT(${linux_hiddev})
	AC_DEFINE_UNQUOTED(LINUX_HIDDEV, "${linux_hiddev}", [Complete path for Linux hiddev.h])
else
	AC_MSG_RESULT(${linux_hiddev} not found)
	linux_hiddev=
fi
AM_CONDITIONAL(HAVE_HIDDEV, test -n "${linux_hiddev}")

dnl Solaris 10/11 USB handling (need librt and libusb runtime path)
case ${target_os} in
	solaris2.1* )
		echo Checking for Solaris 10 / 11 specific configuration for usb drivers
		AC_SEARCH_LIBS(nanosleep,rt)
		LIBUSB_LIBS="-R/usr/sfw/lib ${LIBUSB_LIBS}"
		dnl FIXME: notification disabled while waiting for a libusbugen fix
		AC_DEFINE(USB_NOTIFICATION_DISABLED, 1,
			[Define to 1 if libusb doesn't support timeout.])
		USB_NOTIFICATION_DISABLED=1
		;;
esac

dnl give up if user requested USB drivers but we cannot compile them.
if test "${with_usb}" = "yes" -a "${nut_have_libusb}" != "yes" -a -z "${linux_hiddev}"; then
   AC_MSG_ERROR([USB drivers requested but neither libusb nor hiddev.h found])
fi

AC_MSG_CHECKING(state path)
AC_ARG_WITH(statepath,
AC_HELP_STRING([--with-statepath=PATH], [path for ups state files (/var/state/ups)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${STATEPATH})
		AC_DEFINE_UNQUOTED(STATEPATH, "${STATEPATH}",
			[Path for UPS driver state files])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(STATEPATH, "${withval}",
			[Path for UPS driver state files])
		STATEPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${STATEPATH})
	AC_DEFINE_UNQUOTED(STATEPATH, "${STATEPATH}",
		[Path for UPS driver state files])
)

dnl ---------------------------------------------------------------------
dnl The 'alt pid path' is used by the drivers (via main.c) and upsd, since
dnl ideally they do not run as root and won't be able to write to the usual
dnl /var/run path.  This defaults to the STATEPATH since they should be
dnl able to write there.
dnl

AC_MSG_CHECKING(alt pid path)
AC_ARG_WITH(altpidpath,
AC_HELP_STRING([--with-altpidpath=PATH], [path for driver/upsd .pid files (<statepath>)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${STATEPATH})
		AC_DEFINE_UNQUOTED(ALTPIDPATH, "${STATEPATH}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])

		ALTPIDPATH="${STATEPATH}"
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(ALTPIDPATH, "${withval}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])
		ALTPIDPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${STATEPATH})
	AC_DEFINE_UNQUOTED(ALTPIDPATH, "${STATEPATH}",
		[Path for pid files of drivers and upsd (usually STATEPATH)])
	ALTPIDPATH="${STATEPATH}"
)

AC_MSG_CHECKING(driver path)
AC_ARG_WITH(drvpath,
AC_HELP_STRING([--with-drvpath=PATH], [where to install ups drivers (<prefix>/bin)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		eval conftemp="${DRVPATH}"
		AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
		;;
	*)
		AC_MSG_RESULT(${withval})
		eval conftemp="${withval}"
		AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
		DRVPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	eval conftemp="${DRVPATH}"
	AC_DEFINE_UNQUOTED(DRVPATH, "${conftemp}",
			[Default path for UPS drivers])
)

AC_MSG_CHECKING(cgi path)
AC_ARG_WITH(cgipath,
AC_HELP_STRING([--with-cgipath=PATH], [where to install CGI programs (<prefix>/cgi-bin)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		eval conftemp="${CGIPATH}"
		AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
		;;
	*)
		AC_MSG_RESULT(${withval})
		eval conftemp="${withval}"
		AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
		CGIPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	eval conftemp="${CGIPATH}"
	AC_DEFINE_UNQUOTED(CGIPATH, "${conftemp}",
			[Default path for CGI programs])
	)

AC_MSG_CHECKING(html path)
AC_ARG_WITH(htmlpath,
AC_HELP_STRING([--with-htmlpath=PATH], [where to install HTML files (<prefix>/html)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default)
		eval conftemp="${HTMLPATH}"
		AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
		;;
	*)
		AC_MSG_RESULT(${withval})
		eval conftemp="${withval}"
		AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
		HTMLPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default)
	eval conftemp="${HTMLPATH}"
	AC_DEFINE_UNQUOTED(HTMLPATH, "${conftemp}",
			[Default path for HTML files])
	)

AC_MSG_CHECKING(pidpath)
AC_ARG_WITH(pidpath,
AC_HELP_STRING([--with-pidpath=PATH], [path for .pid files (/var/run)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${PIDPATH})
		AC_DEFINE_UNQUOTED(PIDPATH, "${PIDPATH}",
			[Path where the pid files should go])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(PIDPATH, "${withval}",
			[Path where the pid files should go])
		PIDPATH="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${PIDPATH})
	AC_DEFINE_UNQUOTED(PIDPATH, "${PIDPATH}",
			[Path where the pid files should go])
)

AC_MSG_CHECKING(network port number)
AC_ARG_WITH(port,
AC_HELP_STRING([--with-port=PORT], [port for network communications (3493)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default value: 3493)
		AC_DEFINE_UNQUOTED(PORT, 3493,
			[Port for network communications])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(PORT, ${withval},
			[Port for network communications])
		;;
	esac],
	AC_MSG_RESULT(using default value: 3493)
	AC_DEFINE_UNQUOTED(PORT, 3493,
		[Port for network communications])
)

AC_MSG_CHECKING(user to run as)
AC_ARG_WITH(user,
AC_HELP_STRING([--with-user=username], [user for programs started as root (nobody)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default: ${RUN_AS_USER})
		AC_DEFINE_UNQUOTED(RUN_AS_USER, "${RUN_AS_USER}",
			[User to switch to if started as root])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(RUN_AS_USER, "${withval}",
			[User to switch to if started as root])
		RUN_AS_USER="${withval}"
		;;
	esac],
	AC_MSG_RESULT(using default: ${RUN_AS_USER})
	AC_DEFINE_UNQUOTED(RUN_AS_USER, "${RUN_AS_USER}",
		[User to switch to if started as root])
)

AC_MSG_CHECKING(facility for syslog)
AC_ARG_WITH(logfacility,
AC_HELP_STRING([--with-logfacility=FACILITY], [facility for log messages (LOG_DAEMON)]),
[	case "${withval}" in
	yes|no)
		AC_MSG_RESULT(using default value: LOG_DAEMON)
		AC_DEFINE_UNQUOTED(LOG_FACILITY, LOG_DAEMON,
			[Desired syslog facility - see syslog(3)])
		;;
	*)
		AC_MSG_RESULT(${withval})
		AC_DEFINE_UNQUOTED(LOG_FACILITY, ${withval},
			[Desired syslog facility - see syslog(3)])
		;;
	esac],
	AC_MSG_RESULT(using default value: LOG_DAEMON)
	AC_DEFINE_UNQUOTED(LOG_FACILITY, LOG_DAEMON,
		[Desired syslog facility - see syslog(3)])
)

AC_MSG_CHECKING(which drivers to build)
AC_ARG_WITH(drivers,
AC_HELP_STRING([[[[--with-drivers=driver@<:@,driver...@:>@]]]], [Only use specific drivers (all)]),
[	case "${withval}" in
	yes | no)
		# ignore calls without any arguments
		DRIVER_BUILD_LIST="all"
		;;
	*)
		DRIVER_BUILD_LIST=`echo ${withval} | sed "s/,/ /g"`
		;;
	esac
],
[
	DRIVER_BUILD_LIST="all"
]
)
AC_MSG_RESULT(${DRIVER_BUILD_LIST})
AM_CONDITIONAL(SOME_DRIVERS, test "${DRIVER_BUILD_LIST}" != "all")

AC_MSG_CHECKING(which driver man pages to install)
if test "${DRIVER_BUILD_LIST}" = "all"; then
   DRIVER_MAN_LIST=all
else
   DRIVER_MAN_LIST=""
   for i in ${DRIVER_BUILD_LIST}; do
      if test -f ${srcdir}/man/$i.8; then
         DRIVER_MAN_LIST="${DRIVER_MAN_LIST} $i.8"
      fi
   done
fi
AC_MSG_RESULT(${DRIVER_MAN_LIST})

AC_MSG_CHECKING(whether to strip debug symbols)
AC_ARG_ENABLE(strip,
[  --enable-strip		Strip debugging symbols from binaries	    [no]],
[
	case "${withval}" in
		no)
			AC_MSG_RESULT(no)
		;;
		*)
			AC_MSG_RESULT(yes)
			CFLAGS="${CFLAGS} -s"
		;;
	esac
],
[	AC_MSG_RESULT(no)
])


AC_MSG_CHECKING(whether to enable pkg-config support)
AC_ARG_WITH(pkgconfig-dir,
AC_HELP_STRING([--with-pkgconfig-dir=PATH], [where to install pkg-config *.pc files (/usr/lib/pkgconfig)]),
[
	case "${withval}" in
		yes)
			if (test -d '/usr/lib/pkgconfig')
			then
				PKG_CFG_DIR='/usr/lib/pkgconfig'
			else
				PKG_CFG_DIR=""
			fi
		;;
		no)
			PKG_CFG_DIR=""
		;;
		*)
			PKG_CFG_DIR="${withval}"
		;;
	esac
],
[       
	if (test -d '/usr/lib/pkgconfig')
	then
		PKG_CFG_DIR='/usr/lib/pkgconfig'
	else
		PKG_CFG_DIR=""
	fi
])
if test -n "${PKG_CFG_DIR}"; then
  AC_MSG_RESULT(using ${PKG_CFG_DIR})
else
  AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(WITH_PKG_CONFIG, test -n ${PKG_CFG_DIR})

# 'long long' check - this gets used down in snprintf.o
#
AC_CACHE_CHECK([for long long],nut_cv_have_longlong,[
AC_TRY_RUN([#include <stdio.h>
main() { long long x = 1000000; x *= x; exit(((x/1000000) == 1000000)? 0: 1); }],
nut_cv_have_longlong=yes,nut_cv_have_longlong=no,nut_cv_have_longlong=cross)])
if test "${nut_cv_have_longlong}" = "yes"; then
    AC_DEFINE(HAVE_LONGLONG, 1, [longlong support for snprintf])
fi

# expand $sysconfdir and write it out
eval conftemp="${sysconfdir}"
AC_DEFINE_UNQUOTED(CONFPATH, "${conftemp}",
			[Default path for configuration files])

# same for datadir
eval datatemp="${datadir}"
AC_DEFINE_UNQUOTED(DATADIR, "${datatemp}",
			[Default path for data files])

AC_SUBST(SSL_CFLAGS)
AC_SUBST(SSL_LDFLAGS)
AC_SUBST(GD_INCLUDES)
AC_SUBST(GD_LIBS)
AC_SUBST(NETSNMP_CFLAGS)
AC_SUBST(NETSNMP_LIBS)
AC_SUBST(LIBUSB_CFLAGS)
AC_SUBST(LIBUSB_LIBS)
AC_SUBST(DRIVER_BUILD_LIST)
AC_SUBST(DRIVER_MAN_LIST)
AC_SUBST(DRIVER_INSTALL_TARGET)
AC_SUBST(NETLIBS)
AC_SUBST(SERLIBS)
AC_SUBST(STATEPATH)
AC_SUBST(DRVPATH)
AC_SUBST(CGIPATH)
AC_SUBST(HTMLPATH)
AC_SUBST(RUN_AS_USER)
AC_SUBST(LINUX_HIDDEV)
AC_SUBST(USB_NOTIFICATION_DISABLED)
AC_SUBST(WORDS_BIGENDIAN)
AC_SUBST(PKG_CFG_DIR)

AC_OUTPUT([
 clients/Makefile
 common/Makefile
 conf/Makefile
 data/html/header.html
 data/html/Makefile
 data/Makefile
 docs/Makefile
 drivers/Makefile
 include/Makefile
 lib/libupsclient-config
 lib/libupsclient.pc
 lib/Makefile
 m4/Makefile
 man/Makefile
 packaging/Makefile
 packaging/debian/Makefile
 packaging/mandriva/Makefile
 packaging/RedHat/Makefile
 scripts/hotplug/libhidups
 scripts/hotplug-ng/nut-usbups.hotplug
 scripts/hotplug-ng/nut-usbups.rules
 scripts/Makefile
 server/Makefile
 Makefile
])
