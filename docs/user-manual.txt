:titles.underlines: "__","==","--","~~","^^"

Network UPS Tools User Manual
_____________________________


////////////////////////////////////////////////////////////////////////////////
Arnaud Quette <arnaud.quette@free.fr>
Auth: Russell Kroll <rkroll@exploits.org>
Auth: Peter Selinger <selinger@sourceforge.net>

image::images/nut-banner.png[Network UPS Tools logo]
////////////////////////////////////////////////////////////////////////////////

WARNING: this is a Work In Progress document.

Introduction
============

The primary goal of the Network UPS Tools (NUT) project is to provide  support
for Power Devices, such as Uninterruptible Power Supplies, Power Distributions
Units and Solar Controlers.

NUT provides many <<Features,features>>, with a uniform control and management
interface.

More than 100 different manufacturers, and several thousands models are
<<HCL,compatible>>.

This software is the combined effort of many
<<Acknowledgements,individuals and companies>>, along with the support of our
sponsor http://www.eaton.com[Eaton].

This document intend to describe how to install software support for your
<<General_Info, Power Devices>> (UPS, PDU, ...), and how to use the Network UPS
Tools.

It is not intended to present what are <<General_Info, Power Devices>>, nor the
different technologies that exist.

For such information, have a look at the <<General_Info,General Information>>.

If you wish to discover how everything came together, have a look at the
<<Project_History,Project History>>.


[[Overview]]

include::../README[]


[[Features]]

include::features.txt[]


Compatibility information
-------------------------

Hardware
~~~~~~~~


The current list of hardware supported by NUT can be viewed <<HCL,here>>.

////////////////////////////////////////////////////////////////////////////////
*FIXME*: should we also link to the development tree?
////////////////////////////////////////////////////////////////////////////////

Operating systems
~~~~~~~~~~~~~~~~~

This software has been reported to run on:

- Linux distributions,
- the BSDs,
- Apple's OS X,
- Sun Solaris,
- SGI IRIX,
- HP/UX,
- Tru64 Unix,
- AIX.

There is also a port of the client-side monitoring to Windows called WinNUT.
Windows users may be able to build it directly with Cygwin.

Your system will probably run it too. You just need a good C compiler and
possibly some more packages to gain access to the serial ports.
Other features, such as USB / SNMP / whatever, will also need extra software
installed.

Success reports are welcomed to keep this list accurate. 


[[Installation instructions]]

include::../INSTALL[]


Integrated Power Management support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

...integration with FreeDesktop HAL - Hardware Abstraction Layer (nut-hal.txt)
*FIXME*: declare obsolete
 

[[Configuration_notes]]

include::config-notes.txt[]


Configuring automatic UPS shutdowns
-----------------------------------

include shutdown.txt[]

[[BigServers]]
Typical setups for big servers
------------------------------

include big-servers.txt[]

[[DataRoom]]
Typical setups for data rooms
-----------------------------

include data-room.txt[]

Advanced usage notes
====================

How to use upssched
-------------------

include upssched.txt[]

Using upsmon and your pager together
------------------------------------

include pager.txt[]

Using upsmon to make On Screen Display (OSD) notification
---------------------------------------------------------

*FIXME* to be removed or reworked with pager and more?

include osd-notify.txt[]

NUT Powersaving features and using outlet collection
----------------------------------------------------

include powersaving.txt[]

[[NUT_Security]]
Securisation notes
==================

Configuring SSL
---------------

include ssl.txt[]

chrooting and other forms of paranoia
-------------------------------------

include chroot.txt[]

////////////////////////////////////////////////////////////////////////////////
*FIXME* where can we put the below content?

Contact closure hardware
------------------------

*FIXME* move to developer-guide?

There is also a document called contact-closure.txt included with the
source distribution that contains information on this kind of hardware
and details on adding additional types to the genericups driver.

include contact-closure.txt[]
////////////////////////////////////////////////////////////////////////////////

Information about SNMP and Network UPS Tools
--------------------------------------------

include snmp.txt[]


Appendix A: Glossary
====================

[glossary]
UPS::
	Uninterruptible Power Supply.
PDU::
	Power Distributions Unit.
SCD::
	Solar Controller Device.

[[FAQ]]
Appendix B: Frequently Asked Questions
======================================

include FAQ[]

[[Acknowledgements]]
Appendix C: Acknowledgements / Contributions
============================================

include acknowledgements.txt[Acknowledgements / Contributions]

[[Project_History]]
Appendix D: Project history
===========================

include history.txt[]

[[HCL]]
Appendix E: Hardware Compatibility List
=======================================

include hcl-stable.txt[]

[[General_Info]]
Appendix F: General Information on Power Devices
================================================

- link:http://tldp.org/HOWTO/UPS-HOWTO/[UPS HOWTO] (The Linux Documentation Project)
- link:http://en.wikipedia.org/wiki/Uninterruptible_power_supply[UPS on Wikipedia]
- link:http://en.wikipedia.org/wiki/Power_distribution_unit[PDU on Wikipedia]
- link:http://www.pcguide.com/ref/power/ext/ups/over.htm[UPS on The PC Guide]

[[Support_Request]]
Appendix G: How to request support
==================================

*FIXME* use website/support.txt for the content and merge with "UM 2.12. Support / Help / etc."


[[Cables_information]]
Appendix H: Cables information
==============================

include::cables.txt[]


[[Configure_options]]
Appendix J: Configure options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

include::configure.txt[]


[[Upgrading_notes]]
Appendix K: Upgrading notes
~~~~~~~~~~~~~~~~~~~~~~~~~~~

include::../UPGRADING[]

////////////////////////////////////////////////////////////////////////////////
Comment: point to the website/documentation?

------------------------------------------------------------------------
*sandbox*

- include or reference Project Quality Assurance

- Version Numbering
-----------------

The version numbers work like this: if the middle number is odd, it's a
development tree, otherwise it is the stable tree.

The past stable trees were 1.0, 1.2, 1.4 and 2.0, with the latest stable tree
designated 2.2.  The development trees were 1.1, 1.3, 1.5 and 2.1.

The jump to 2.2 is mostly due to the large changes to the features list.
There have also been a number of architectural changes which may not be
noticeable to most users.

- 
Backwards and Forwards Compatibility
------------------------------------

The old network code spans a range from about 0.41.1 when TCP support 
was introduced up to the recent 1.4 series.  It used variable names
like STATUS, UTILITY, and LOADPCT.  Many of these names go back to the
earliest prototypes of this software from 1997.  At that point there
was no way to know that so many drivers would come along and introduce 
so many new variables and commands.  The resulting mess grew out of
control over the years.

During the 1.3 development cycle, all variables and instant commands
were renamed to fit into a tree-like structure.  There are major groups,
like input, output and battery.  Members of those groups have been
arranged to make sense - input.voltage and output.voltage compliment
each other.  The old names were UTILITY and OUTVOLT.  The benefits in
this change are obvious.

The 1.4 clients can talk to either type of server, and can handle either
naming scheme.  1.4 servers have a compatibility mode where they can
answer queries for both names, even though the drivers are internally
using the new format.

When 1.4 clients talk to 1.4 or 2.0 (or more recent) servers, they will
use the new names.

Here's a table to make it easier to visualize:

   +--------+------------------------+
   |        | Server                 |
   +--------+-----+-----+-----+------+
   | Client | 1.0 | 1.2 | 1.4 | 2.0+ |
   +========+=====+=====+=====+======+
   | 1.0    | yes | yes | yes | no   |
   +--------+-----+-----+-----+------+
   | 1.2    | yes | yes | yes | no   |
   +--------+-----+-----+-----+------+
   | 1.4    | yes | yes | yes | yes  |
   +--------+-----+-----+-----+------+
   | 2.0    | no  | no  | yes | yes  |
   +--------+-----+-----+-----+------+

Version 2.0 (and more recent) does not contain backwards compatibility for
the old protocol and variable/command names.  As a result, 2.0 clients can't 
talk to anything older than a 1.4 server.  If you ask a 2.0 client to 
fetch "STATUS", it will fail.  You'll have to ask for "ups.status" 
instead.

Authors of separate monitoring programs should have used the 1.4 series
to write support for the new variables and command names.  Client
software can easily support both versions as long as they like.  If upsd
returns 'ERR UNKNOWN-COMMAND' to a GET request, you need to use REQ.

------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////
