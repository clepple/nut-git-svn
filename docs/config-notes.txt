Configuration notes
===================

This chapter describe most of the configuration and use aspects of NUT,
including establishing communication with the device and configuring safe
shutdowns when the UPS battery runs out of power.

There are many programs and link:user-manual.html#Features[features] in this
package.  You should check out the link:user-manual.html#Overview[NUT Overview]
and other accompanying documentation to see how it all works.

////////////////////////////////////////////////////////////////////////////////
FIXME: add a section for
NUT Control Center - NCC
------------------------

////////////////////////////////////////////////////////////////////////////////



Details about the configuration files
-------------------------------------

Generalities
~~~~~~~~~~~~

All configuration files within this package are parsed with a common
state machine, which means they all can use a number of extras described here.

First, most of the programs use an uppercase word to declare a
configuration directive.  This may be something like MONITOR, NOTIFYCMD,
or ACCESS.  The case does matter here.  "monitor" won't be recognized.

Next, the parser does not care about whitespace between words.  If you
like to indent things with tabs or spaces, feel free to do it here.  

If you need to set a value to something containing spaces, it has to be
contained within "quotes" to keep the parser from splitting up the line.
That is, you want to use something like this:

	SHUTDOWNCMD "/sbin/shutdown -h +0"

Without the quotes, it would only see the first word on the line.

OK, so let's say you really need to embed that kind of quote within your
configuration directive for some reason.  You can do that too.

	NOTIFYCMD "/bin/notifyme -foo -bar \"hi there\" -baz"

In other words, \ can be used to escape the ".

Finally, for the situation where you need to put the \ character into your
string, you just escape it.

	NOTIFYCMD "/bin/notifyme c:\\dos\\style\\path"

The \ can actually be used to escape any character, but you only really
need it for \, ", and # as they have special meanings to the parser.

# is the comment character.  Anything after an unescaped # is ignored.

Something like this...

	identity = my#1ups

... will actually turn into "identity = my", since the # stops the 
parsing. If you really need to have a # in your configuration, then
escape it.

	identity = my\#1ups

Much better.

Line spanning
~~~~~~~~~~~~~

You can put a backslash at the end of the line to join it to the next
one.  This creates one virtual line that is composed of more than one
physical line.

Also, if you leave the "" quote container open before a newline, it will
keep scanning until it reaches another one.  If you see bizarre behavior
in your configuration files, check for an unintentional instance of
quotes spanning multiple lines.


Basic configuration
-------------------

This chapter describe the base configuration to establish communication with the
device.

This will be sufficient for PDU. But for UPS (and possibly SCD), you need to
configure <<UPS_shutdown,automatic shutdowns for low battery events>>.

[[Driver_configuration]]
Driver configuration
~~~~~~~~~~~~~~~~~~~~

Create one section per UPS in /usr/local/ups/etc/ups.conf

To find out which driver to use, check the <<HCL,Hardware Compatibility List>>,
or data/driver.list.

Once you have picked a driver, create a section for your UPS in
ups.conf.  You must supply values for "driver" and "port".

Some drivers may require other flags or settings.  The "desc" value
is optional, but is recommended to provide a better description of
what your UPS is supporting.

A typical device without any extra settings looks like this:

	[mydevice]
		driver = mydriver
		port = /dev/ttyS1
		desc = "Workstation"

////////////////////////////////////////////////////////////////////////////////
FIXME: broaden to all USB drivers
////////////////////////////////////////////////////////////////////////////////

NOTE: usbhid-ups is a special case and ignores the "port" value.
You must still set this value, but it does not matter what you set
it to; you can set "port" to "auto" if you like. If you only own
one local UBS UPS, the driver will find it automatically. If you
own more than one UBS UPS, refer to the usbhid-ups(8) man page for
more information.

References: link:man/ups.conf.html[ups.conf(5)], link:man/nutupsdrv.html[nutupsdrv(8)],
plus whatever link:man/index.html#Drivers[driver(s)] you intend to use.

[[Starting_drivers]]
Starting the driver(s)
~~~~~~~~~~~~~~~~~~~~~~

Start the driver(s) for your hardware:

	/usr/local/ups/bin/upsdrvctl start

Make sure the driver doesn't report any errors.  It should show a
few details about the hardware and then enter the background.  You
should get back to the command prompt a few seconds later.  For
reference, a successful start of the belkin driver looks like this:

	# /usr/local/ups/bin/upsdrvctl start
	Network UPS Tools - Generic HID driver 0.34 (2.4.1)
	USB communication driver 0.31
	Using subdriver: MGE HID 1.12
	Detected EATON - Ellipse MAX 1100 [ADKK22008]

If the driver doesn't start cleanly, make sure you have picked the
right one for your hardware.  You might need to try other drivers
by changing the "driver=" value in ups.conf.

Be sure to check the driver's man page to see if it needs any extra
settings in ups.conf to detect your hardware.

If it says "can't bind /var/state/ups/..." or similar, then your
state path probably isn't writable by the driver.  Check the
<<StatePath,permissions and mode on that directory>>.

After making changes, try the <<Ownership, Ownership and permissions>> step again.

References: man pages: link:man/nutupsdrv.html[nutupsdrv(8)], link:man/upsdrvctl.html[upsdrvctl(8)]


Data server configuration (upsd)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Configure upsd, which serves data from the drivers to the clients.

First, edit upsd.conf to allow access to your client systems. By
default, upsd will only listen to localhost port 3493/tcp. If you want
to connect to it from other machines, you must specify each interface you
want upsd to listen on for connections, optionally with a port number.

	LISTEN 127.0.0.1 3493
	LISTEN ::1 3493

NOTE: if you run a firewall of some sort, you may have to add rules
to allow these incoming connections.

////////////////////////////////////////////////////////////////////////////////
*FIXME* add a note on TCP wrappers and SSL
////////////////////////////////////////////////////////////////////////////////

Next, create upsd.users.  For now, this can be an empty file.
You can come back and add more to it later when it's time to 
configure upsmon or run one of the management tools.

Do not make either file world-readable, since they both hold
access control data and passwords.  They just need to be readable by
the user you created in the preparation process.

The suggested configuration is to chown it to root, chgrp it to the
group you created, then make it readable by the group.

	chown root:nut upsd.conf upsd.users
	chmod 0640 upsd.conf upsd.users

References: man pages: link:man/upsd.conf.html[upsd.conf(5)],
link:man/upsd.users.html[upsd.users(5)],
link:man/upsd.html[upsd(8)]

[[Starting_upsd]]
Starting the data server
~~~~~~~~~~~~~~~~~~~~~~~~

Start the network data server:

	/usr/local/ups/sbin/upsd

Make sure it is able to connect to the driver(s) on your system.
A successful run looks like this:

	# /usr/local/ups/sbin/upsd
	Network UPS Tools upsd 2.4.1
	listening on 127.0.0.1 port 3493
	listening on ::1 port 3493
	Connected to UPS [eaton]: usbhid-ups-eaton

upsd prints dots while it waits for the driver to respond.  Your
system may print more or less depending on how many drivers you
have and how fast they are.

NOTE: if upsd says that it can't connect to a UPS or that the data
is stale, then your ups.conf is not configured correctly, or you
have a driver that isn't working properly.  You must fix this before
going on to the next step.

Reference: man page: link:man/upsd.html[upsd(8)]

Check the UPS data
~~~~~~~~~~~~~~~~~~

Status data
^^^^^^^^^^^

Make sure that the UPS is providing good status data.

	/usr/local/ups/bin/upsc myupsname@localhost ups.status

You should see just one line in response:

	OL

OL means your system is running on line power.  If it says something
else (like OB - on battery, or LB - low battery), your driver was 
probably misconfigured during the <<Driver_configuration, Driver configuration>>
step.  If you reconfigure the driver, use 'upsdrvctl stop' to stop it, then
start it again as shown in the <<Starting_drivers, Starting driver(s)>> step.

Reference: man page: link:man/upsc.html[upsc(8)]


All data
^^^^^^^^

Look at all of the status data which is being monitored.

	/usr/local/ups/bin/upsc myupsname@localhost

What happens now depends on the kind of device and driver you have.
In the list, you should see ups.status with the same value you got
above.  A sample run on a UPS (Eaton Ellipse MAX 1100) looks like this:

	battery.charge: 100
	battery.charge.low: 20
	battery.runtime: 2525
	battery.type: PbAc
	device.mfr: EATON
	device.model: Ellipse MAX 1100
	device.serial: ADKK22008
	device.type: ups
	driver.name: usbhid-ups
	driver.parameter.pollfreq: 30
	driver.parameter.pollinterval: 2
	driver.parameter.port: auto
	driver.version: 2.4.1-1988:1990M
	driver.version.data: MGE HID 1.12
	driver.version.internal: 0.34
	input.sensitivity: normal
	input.transfer.boost.low: 185
	input.transfer.high: 285
	input.transfer.low: 165
	input.transfer.trim.high: 265
	input.voltage.extended: no
	outlet.1.desc: PowerShare Outlet 1
	outlet.1.id: 2
	outlet.1.status: on
	outlet.1.switchable: no
	outlet.desc: Main Outlet
	outlet.id: 1
	outlet.switchable: no
	output.frequency.nominal: 50
	output.voltage: 230.0
	output.voltage.nominal: 230
	ups.beeper.status: enabled
	ups.delay.shutdown: 20
	ups.delay.start: 30
	ups.firmware: 5102AH
	ups.load: 0
	ups.mfr: EATON
	ups.model: Ellipse MAX 1100
	ups.power.nominal: 1100
	ups.productid: ffff
	ups.serial: ADKK22008
	ups.status: OL CHRG
	ups.timer.shutdown: -1
	ups.timer.start: -1
	ups.vendorid: 0463

Reference: man page: link:man/upsc.html[upsc(8)]

Startup scripts
~~~~~~~~~~~~~~~

NOTE: This step is not need if you installed from packages.

Edit your startup scripts, and make sure upsdrvctl and upsd are run every time
your system starts.

[[UPS_shutdown]]
Configuring automatic shutdowns for low battery events
------------------------------------------------------

The whole point of UPS software is to bring down the OS cleanly when you
run out of battery power. Everything else is roughly eye candy.

To make  sure your system shuts down properly, you will need to perform some
additional configuration and run upsmon. Here are the basics.

[[Shutdown_design]]
Shutdown design
~~~~~~~~~~~~~~~

When your UPS batteries get low, the operating system needs to be brought
down cleanly.  Also, the UPS load should be turned off so that all devices
that are attached to it are forcibly rebooted.

Here are the steps that occur when a critical power event happens:

1. The UPS goes on battery

2. The UPS reaches low battery (a "critical" UPS)

3. The upsmon master notices and sets "FSD" - the "forced shutdown"
   flag to tell all slave systems that it will soon power down the load.

   (If you have no slaves, skip to step 6)

4. upsmon slave systems see "FSD" and:

   - generate a NOTIFY_SHUTDOWN event
   - wait FINALDELAY seconds - typically 5
   - call their SHUTDOWNCMD
   - disconnect from upsd

5. The upsmon master system waits up to HOSTSYNC seconds (typically 15) 
   for the slaves to disconnect from upsd.  If any are connected after 
   this time, upsmon stops waiting and proceeds with the shutdown 
   process.

6. The upsmon master:

   - generates a NOTIFY_SHUTDOWN event
   - waits FINALDELAY seconds - typically 5
   - creates the POWERDOWNFLAG file - usually /etc/killpower
   - calls the SHUTDOWNCMD

7. On most systems, init takes over, kills your processes, syncs and
   unmounts some filesystems, and remounts some read-only.

8. init then runs your shutdown script.  This checks for the
   POWERDOWNFLAG, finds it, and tells the UPS driver(s) to power off
   the load.

9. The system loses power.

10. Time passes.  The power returns, and the UPS switches back on.

11. All systems reboot and go back to work.


How you set it up
~~~~~~~~~~~~~~~~~

[[NUT_user_creation]]
NUT user creation
^^^^^^^^^^^^^^^^^

Create a upsd user for upsmon to use while monitoring this UPS.

Edit upsd.users and create a new section.  upsmon will connect
to upsd and use this user name (in brackets) and password to
authenticate.  This example is for a user called "monuser":

	[monuser]
		password = mypass
		upsmon master
		# or upsmon slave

References: link:man/upsd.html[upsd(8)], link:man/upsd.users.html[upsd.users(5)]

Reloading the data server
^^^^^^^^^^^^^^^^^^^^^^^^^

Reload upsd.  Depending on your configuration, you may be able to 
do this without stopping upsd:

	/usr/local/ups/sbin/upsd -c reload

If that doesn't work (check the syslog), just restart it:

	/usr/local/ups/sbin/upsd -c stop
	/usr/local/ups/sbin/upsd 

NOTE: if you want to make reloading work later, see the entry in the
link:faq.html[FAQ] about starting upsd as a different user.

Power Off flag file
^^^^^^^^^^^^^^^^^^^

Set the POWERDOWNFLAG location for upsmon.

In upsmon.conf, add a POWERDOWNFLAG directive with a filename.
upsmon will create this file when the UPS needs to be powered off
during a power failure when low battery is reached.

We will test for the presence of this file in a later step.

	POWERDOWNFLAG /etc/killpower

References: man pages: link:man/upsmon.html[upsmon(8)],
link:man/upsmon.conf.html[upsmon.conf(5)]

Securing upsmon.conf
^^^^^^^^^^^^^^^^^^^^

The recommended setting is to have it owned by root:nut, then make it readable
by the group and not world.  This file contains passwords that could be used by
an attacker to start a shutdown, so keep it secure.

	chown root:nut upsmon.conf
	chmod 0640 upsmon.conf

This step has been placed early in the process so you secure this file before
adding sensitive data in the next step.


Create a MONITOR directive for upsmon
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Edit upsmon.conf and create a MONITOR line with the UPS definition 
(<upsname>@<hostname>), username and password from the <<NUT_user_creation, NUT user creation>>
step, and the master or slave setting.

If it's the master (i.e., it's connected to this UPS directly):

	MONITOR myupsname@mybox 1 monuser mypass master

If it's just monitoring this UPS over the network, and some other system is the
master:

	MONITOR myupsname@mybox 1 monuser mypass slave

The number "1" here is the power value.  This should always be set to 1 unless
you have a very special (read: expensive) system with redundant power supplies.
In such cases, refer to the User Manual:

- link:user-manual.html#BigServers[typical setups for big servers],
- link:user-manual.html#DataRoom[typical setups for data rooms].

References: link:man/upsmon.html[upsmon(8)],
link:man/upsmon.conf.html[upsmon.conf(5)]

Define a SHUTDOWNCMD for upsmon
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Still in upsmon.conf, add a directive that tells upsmon how to shut down your
system.  This example seems to work on most systems:

	SHUTDOWNCMD "/sbin/shutdown -h +0"

Notice the presence of "quotes" here to keep it together.

If your system has special needs, you may want to set this to a script which
does local shutdown tasks before calling init.


Start upsmon
^^^^^^^^^^^^

	/usr/local/ups/sbin/upsmon

If it complains about something, then check your configuration.

Checking upsmon
^^^^^^^^^^^^^^^

Look for messages in the syslog to indicate success.  It should look something
like this:

	May 29 01:11:27 mybox upsmon[102]: Startup successful
	May 29 01:11:28 mybox upsd[100]: Client monuser@192.168.50.1
	logged into UPS [myupsname]

Any errors seen here are probably due to an error in the config files of either
upsmon or upsd.  You should fix them before continuing.


Startup scripts
^^^^^^^^^^^^^^^

NOTE: This step is not need if you installed from packages.

Edit your startup scripts, and add upsmon.

Make sure upsmon starts when your system comes up.  Do it after upsdrvctl and
upsd, or it will complain about not being able to contact the server.

////////////////////////////////////////////////////////////////////////////////
*FIXME*
- point sample scripts in scripts/...
- merge with shutdown.txt
////////////////////////////////////////////////////////////////////////////////


Shutdown scripts
^^^^^^^^^^^^^^^^

NOTE: This step is not need if you installed from packages.

Edit your shutdown scripts, and add 'upsdrvctl shutdown'.

You should configure your system to power down the UPS after the filesystems are
remounted read-only.  Have it look for the presence of the POWERDOWNFLAG (from
upsmon.conf), using this as an example:

--------------------------------------------------------------------------------

	if (test -f /etc/killpower)
	then
		echo "Killing the power, bye!"
		/usr/local/ups/bin/upsdrvctl shutdown

		sleep 120

		# uh oh... the UPS power-off failed
		# you probably want to reboot here so you don't get stuck!
		# *** see the section on power races below! ***
	fi

--------------------------------------------------------------------------------

[WARNING]
================================================================================
- Be careful that upsdrvctl command will probably power off your machine.
Don't use it unless your system is ready to be halted by force.
If you run RAID, read the below RAID warning!

- Make sure the filesystem(s) containing upsdrvctl, ups.conf and your UPS
driver(s) are mounted (possibly in read-only mode) when the system gets to this
point.  Otherwise it won't be able to figure out what to do.
================================================================================



Testing shutdowns
^^^^^^^^^^^^^^^^^

To see how upsdrvctl will behave without actually turning off power, use
the -t argument:

	/usr/local/ups/bin/upsdrvctl -t shutdown

It will display the sequence without actually calling the drivers.

You can finally test a forced shutdown sequence (FSD) using:

	/usr/local/ups/sbin/upsmon -c fsd

This will execute a full shutdown sequence, as presented in
<<Shutdown_design,Shutdown design>>, starting from the 3rd step.



RAID warning
~~~~~~~~~~~~

If you run any sort of RAID equipment, make sure your arrays are either halted
(if possible) or switched to "read-only" mode. Otherwise you may suffer a long
resync once the system comes back up.

The kernel may not ever run its final shutdown procedure, so you must take care
of all array shutdowns in userspace before upsdrvctl runs.

If you use software RAID (md) on Linux, get mdadm and try using
'mdadm --readonly' to put your arrays in a safe state. This has to happen after
your shutdown scripts have remounted the filesystems.

On hardware RAID or other kernels, you have to do some detective work. It may be
necessary to contact the vendor or the author of your driver to find out how to
put the array in a state where a power loss won't leave it "dirty".

////////////////////////////////////////////////////////////////////////////////
FIXME: update and complete...
My understanding is that 3ware devices on Linux will be fine unless there are
pending writes.  Make sure your filesystems are remounted read-only and you should be covered.
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
FIXME: update and complete with the remaindr of
include shutdown.txt[]
////////////////////////////////////////////////////////////////////////////////

[[BigServers]]
Typical setups for big servers
------------------------------

include big-servers.txt[]

[[DataRoom]]
Typical setups for data rooms
-----------------------------

include data-room.txt[]


More information can be found in the link:user-manual.html[NUT User Manual], and
the various link:man/index.html[user manual pages].
