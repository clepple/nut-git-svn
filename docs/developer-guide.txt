Network UPS Tools Developer Guide
=================================
Charles Lepple <clepple@gmail.com>

image::images/nut-banner.png[Network UPS Tools logo]

WARNING: this is a Work In Progress document.

Introduction
------------

...

Design
------

This software is designed around a layered scheme with drivers, a server and
clients. These layers communicate with text-based protocols for easier
maintenance and diagnostics.

The layering
~~~~~~~~~~~~

--------------------------------------
  CLIENTS: upsmon, upsc, upsrw, upsstats, upsset, etc. (via upsclient)

           < network: TCP sockets, typically on port 3493 >

   SERVER: upsd

           < Unix domain sockets with text-based messages >

  DRIVERS: apcsmart, bestups, powercom, etc.

           < serial communications, SNMP, USB, etc. >

EQUIPMENT: Smart-UPS 700, Fenton PowerPal 660, etc. (actual UPS hardware)
--------------------------------------

How information gets around
~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the equipment
^^^^^^^^^^^^^^^^^^

DRIVERS talk to the EQUIPMENT and receive updates.  For most hardware this
is polled (DRIVER asks EQUIPMENT about a variable), but forced updates are
also possible.  The exact method is not important, as it is abstracted
by the driver.

From the driver
^^^^^^^^^^^^^^^

The core of all DRIVERS maintains internal storage for every variable
that is known along with the auxiliary data for those variables.  It 
sends updates to this data to any process which connects to the Unix
domain socket.

The DRIVERS will also provide a full atomic copy of their internal
knowledge upon receiving the "DUMPALL" command on the socket.  The dump
is in the same format as updates, and is followed by "DUMPDONE".  When
"DUMPDONE" has been received, the view is complete.

The SERVER will connect to the socket of each DRIVER and will request a
dump at that time.  It retains this data in local storage for later use.
It continues to listen on the socket for additional updates.

This protocol is documented in the <<sock-protocol,Unix socket protocol>> section.

From the server
^^^^^^^^^^^^^^^

The SERVER's internal storage maintains a complete copy of the data
which is in the DRIVER, so it is capable of answering any request
immediately.  When a request for data arrives from a CLIENT, the SERVER
looks through the internal storage for that UPS and returns the
requested data if it is available.

The format for requests from the CLIENT is documented in the <<protocol,TCP protocol>> section

Instant commands
~~~~~~~~~~~~~~~~

Instant commands is the term given to a set of actions that result in
something happening to the UPS.  Some of the common ones are
test.battery.start to initiate a battery test and test.panel.start to
test the front panel of the UPS.

They are passed to the SERVER from a CLIENT using an authenticated
network connection.  The SERVER first checks to make sure that the instant
command is valid for the DRIVER.  If it's supported, a message is sent 
via a socket to the DRIVER containing the command and any auxiliary
information.

At this point, there is no confirmation to the SERVER of the command's
execution.  This is (still) planned for a future release.  This has been
delayed since returning a response involves some potentially interesting
timing issues.  Remember that upsd services clients in a round-robin
fashion, so all queries must be lightweight and speedy.

Setting variables
~~~~~~~~~~~~~~~~~

Some variables in the DRIVER or EQUIPMENT can be changed, and carry the
FLAG_RW flag.  Upon receiving a SET command from the CLIENT, the SERVER
first verifies that it is valid for that DRIVER in terms of writability
and data type.  If those checks pass, it then sends the SET command
through the socket, much like the instant command design.

The DRIVER is expected to commit the value to the EQUIPMENT and update
its internal representation of that variable.

Like the instant commands, there is currently no acknowledgement of the
command's completion from the DRIVER.  This, too, is planned for a future
release.

Example data path
~~~~~~~~~~~~~~~~~

Here's the path a piece of data might take through this architecture.
The event is a UPS going on battery, and the final result is a pager
delivering the alpha message to the admin.

1. EQUIPMENT reports on battery by setting flag in status register

2. DRIVER notices this flag and stores it in the ups.status variable as
   OB.  This update gets pushed out to any listeners via the sockets.

3. SERVER upsd sees activity on the socket, reads it, parses it, and 
   commits the new data to its local version of the status variable. 

4. CLIENT upsmon does a routine poll of SERVER for "ups.status" and
   gets "OB".

5. CLIENT upsmon then invokes its NOTIFYCMD which is upssched.

6. upssched starts up a daemon to handle a timer which will expire about
   30 seconds into the future.

7. 30 seconds later, the timer expires since the UPS is still on battery,
   and upssched calls the CMDSCRIPT upssched-cmd.

8. upssched-cmd parses the args and calls sendmail.

9. Avian carriers, smoke signals, SMTP, and some magic result in the
   message getting from the pager company's gateway to a transmitter
   and then to the admin's pager.

This scenario requires some configuration, obviously:

1. There's a UPS driver running.
   (Whatever applies for the hardware)

2. upsd has a valid UPS entry in ups.conf for this UPS.

	[myups]
		driver = upsdriver
		port = /dev/ttySx

3. upsd has a valid user for upsmon in upsd.users.

	[monuser]
		password = somepass
		upsmon master

4. upsmon is set to monitor this UPS in upsmon.conf.
   
	MONITOR myups@localhost 1 monuser somepass master

5. upsmon is set to EXEC the NOTIFYCMD for the ONBATT condition in
   upsmon.conf.

	NOTIFYFLAG ONBATT EXEC

6. upsmon calls upssched as the NOTIFYCMD in upsmon.conf.

	NOTIFYCMD /path/to/upssched

7. upssched has a 30 second timer for ONBATT in upssched.conf.

	AT ONBATT * START-TIMER upsonbatt 30

8. upssched calls upssched-cmd as the CMDSCRIPT in upssched.conf.

	CMDSCRIPT /path/to/upssched-cmd

9. upssched-cmd knows what to do with "upsonbatt" as its first argument
   (A quick case..esac construct, see the examples)

History
~~~~~~~

The oldest versions of this software (1998) had no separation between
the driver and the network server and only supported the latest APC
Smart-UPS hardware as a result.  The network protocol used brittle
binary structs.  This had numerous bad implications for compatibility
and portability.

After the driver and server were separated, data was shared through the
state file concept.  Status was written into a static array (the "info
array") by drivers, and that array was stored on disk.  upsd would
periodically read that file into a local copy of that array.

Shared memory mode was added a bit later, and that removed some of the
lag from the status updates.  Unfortunately, it didn't have any locking
originally, and the possibility for corruption due to races existed.

mmap() support was added at some point after that, and became the
default.  The drivers and upsd would mmap() the file into memory and
read or write from it.  Locking was done using the state file as the
token, so contention problems were avoided.  This method was relatively
quick, but it involved at least 3 copies of the data (driver, disk/mmap,
server) and a whole lot of locking and unlocking.  It could occasionally
delay the driver or server when waiting for a lock.

In April 2003, the entire state management subsystem was removed and
replaced with a single local socket.  The drivers listen for
connections and push updates asynchronously to any listeners.  They also
recognize a few commands.  Drivers also dampen updates, and only push
them out when something actually changes.

As a result, upsd no longer has to poll any files on the disk, and can
just select() all of its fds and wait for activity.  When one of them is
active, it reads the fd and parses the results.  Updates from the
hardware now get to upsd about as fast as they possibly can.

Drivers used to call setinfo() to change the local array, and then would
call writeinfo() to push the array onto the disk, or into the 
mmap/shared memory space.  This introduced a lag since many drivers poll
quite a few variables during an update.

Information for developers
--------------------------

This section is intended to explain some of the more useful things
within the tree and provide a standard for working on the code.

General stuff - common subdirectory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

String handling
^^^^^^^^^^^^^^^

Use snprintf.  It's even provided with a compatibility module if the
target host doesn't have it natively.  

If you use snprintf to load some value into a buffer, make sure you
provide the format string.  Don't use user-provided format strings,
since that's an easy way to open yourself up to an exploit.

Don't use strcat.  We have a neat wrapper for snprintf called snprintfcat
that allows you to append to char * with a format string and all the usual
string length checking of snprintf.

Error reporting
^^^^^^^^^^^^^^^

Don't call syslog() directly.  Use upslog_with_errno() and upslogx().
They may write to the syslog, stderr, or both as appropriate.  This
means you don't have to worry about whether you're running in the
background or not.

upslog_with_errno prints your message plus the string expansion of
errno.  upslogx just prints the message.

fatal_with_errno and fatalx work the same way, but they
exit(EXIT_FAILURE) afterwards. Don't call exit() directly.

Debugging information
^^^^^^^^^^^^^^^^^^^^^

upsdebug_with_errno(), upsdebugx() and upsdebug_hex() use the
global nut_debug_level so you don't have to mess around with
printfs yourself.  Use them.

Memory allocation
^^^^^^^^^^^^^^^^^

xmalloc, xcalloc, xrealloc and xstrdup all check the results of the base
calls before continuing, so you don't have to.  Don't use the raw calls
directly.

Config file parsing
^^^^^^^^^^^^^^^^^^^

The configuration parser, called parseconf, is now up to its fourth
major version.  It has multiple entry points, and can handle many
different jobs.  It's usually used for parsing files, but it can also
take input a line at a time or even a character at a time.

You must initialize a context buffer with pconf_init before using any
other parseconf function.  pconf_encode is the only exception, since it
operates on a buffer you supply and is an auxiliary function.

Escaping special characters and quoting multiple-word elements is all
handled by the state machine.  Using the same code for all config files
avoids code duplication.

Note: this does not apply to drivers.  Driver authors should use the
upsdrv_makevartable() scheme to pick up values from ups.conf.  Drivers
should not have their own config files.

Drivers may have their own data files, such as lists of hardware,
mapping tables, or similar.  The difference between a data file and a
config file is that users should never be expected to edit a data file
under normal circumstances.  This technique might be used to add more
hardware support to a driver without recompiling.

<time.h> vs. <sys/time.h>
^^^^^^^^^^^^^^^^^^^^^^^^^

This is already handled by autoconf, so just include "timehead.h" and you
will get the right headers on every system.

UPS drivers - main.c
~~~~~~~~~~~~~~~~~~~~

The UPS drivers use main.c as their core.  The only exception is
dummycons, which only looks like a driver by using the same dstate
function calls.

To write a new driver, you create a file with a series of support
functions that will be called by main.  These all have names that start
with "upsdrv_", and they will be called at different times by main
depending on what needs to happen.

See the <<new-drivers,driver documentation>> for information on writing drivers, and also refer
to the skeletal driver in skel.c.

Portability
~~~~~~~~~~~

Avoid things that will break on other systems.  All the world is not an
x86 Linux box.

There are still older systems out there that don't do C++ style comments.

--------------------------------------
/* Comments look like this. */
// Not like this.
--------------------------------------

Newer versions of gcc allow you to declare a variable inside a function
somewhat like the way C++ operates, like this:

--------------------------------------
function do_stuff(void)
{
	check_something();

	int a; /* Danger! */

	a = do_something_else();
}
--------------------------------------

While this will compile and run on these newer versions, it will fail
miserably for anyone on an older system.  That means you must not use
it.  gcc only warns about this with -pedantic.

Coding style
~~~~~~~~~~~~

This is how we do things.

--------------------------------------
int open_subspace(char *ship, int privacy)
{
	if (!privacy)
		return insecure_channel(ship);
	
	if (!init_privacy(ship))
		fatal_with_errno("Can't open secure channel");

	return secure_channel(ship);
}
--------------------------------------

The basic idea is that we try to group things into functions, and then
find ways to drop out of them when we can't go any further.  There's
another way to program this involving a big else chunk and a bunch of
braces, and it can be hard to follow.  You can read this from top to
bottom and have a pretty good idea of what's going on without having to
track too much { } nesting and indenting.

We don't really care for pretentiousVariableNamingSchemes.  If your function or
variable names start pushing important code off the right margin of the screen,
expect them to meet the byte chainsaw sooner or later.

All types defined with typedef should end in "_t", because this is
easier to read, and it enables tools (such as indent and emacs) to
display the source code correctly.

Indenting with tabs vs. spaces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Another thing to notice is that the indenting happens with tabs instead
of spaces.  This lets everyone have their personal tab-width setting
without inflicting much pain on other developers.  If you use a space,
then you've fixed the spacing in stone and have really annoyed half of
the people out there.

If you write something that uses spaces, you may get away with it in a
driver that's relatively secluded.  However, if I have to work on that
code, expect it to get reformatted according to the above.

Patches to existing code that don't conform to the coding style being
used in that file will probably be dropped.  If it's something we really
need, it will be grudgingly reformatted before being included.

When in doubt, have a look at Linus's take on this topic in the Linux
kernel - Documentation/CodingStyle.  He's done a far better job of
explaining this.

Line breaks
^^^^^^^^^^^

It is better to have lines that are longer than 80 characters than to
wrap lines in random places. This makes it easier to work with tools
such as "grep", and it also lets each developer choose their own
window size and tab setting without being stuck to one particular
choice.

Of course, this does not mean that lines should be made unnecessarily
long when there is a better alternative (see the note on
pretentiousVariableNamingSchemes above).  Certainly there should not
be more than one statement per line. Please do not use

	if (condition) break;

but use the following:

--------------------------------------
if (condition) {
	break;
}
--------------------------------------

Miscellaneous coding style tools
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can go a long way towards converting your source code to the NUT
coding style by piping it through the following command:

--------------------------------------
indent -kr -i8 -T FILE -l1000 -nhnl
--------------------------------------

This next command does a reasonable job of converting most C++ style
comments (but not URLs and DOCTYPE strings):

--------------------------------------
sed 's#\(^\|[ \t]\)//[ \t]*\(.*\)[ \t]*#/* \2 */#'
--------------------------------------
 
Emacs users can adjust how tabs are displayed. For example, it is
possible to set a tab stop to be 3 spaces, rather than the usual 8.
(Note that in the saved file, one indentation level will still
correspond to one tab stop; the difference is only how the file is
rendered on screen). It is even possible to set this on a
per-directory basis, by putting something like this into your .emacs
file:

--------------------------------------
;; NUT style

(defun nut-c-mode ()
 "C mode with adjusted defaults for use with the NUT sources."
 (interactive)
 (c-mode)
 (c-set-style "K&R")
 (setq c-basic-offset 3)  ;; 3 spaces C-indentation
 (setq tab-width 3))      ;; 3 spaces per tab

;; apply NUT style to all C source files in all subdirectories of nut/

(setq auto-mode-alist (cons '(".*/nut/.*\\.[ch]$". nut-c-mode)
                       auto-mode-alist))
--------------------------------------

Finishing touches
^^^^^^^^^^^^^^^^^

I like code that uses const and static liberally.  If you don't need to
expose a function or global variable to the outside world, static is
your friend.  If nobody should edit the contents of some buffer that's
behind a pointer, const keeps them honest.

We always compile with -Wall, so things like const and static help you
find implementation flaws.  Functions that attempt to modify a constant
or access something outside their scope will throw a warning or even
fail to compile in some cases.  This is what we want.

//////////////////////////////////////////
Spaghetti
^^^^^^^^^

If you use a goto, expect me to drop it when my head stops spinning.
It gives me flashbacks to the BASIC code I wrote on the 8 bit systems of
the 80s.  I've tried to clean up my act, and you should make the effort
as well.  

I'm not making a blanket statement about gotos, since everything
probably has at least one good use.  There are a few cases where a goto
is more efficient than any other approach, but you probably won't
encounter them in this software.

Hint: there *was* a good use of a goto in upsd until the 1.3 series.  At
this point we are back to zero gotos since that code was replaced by
another technique that doesn't need it.
//////////////////////////////////////////

Legacy code
^^^^^^^^^^^

There are parts of the source tree that do not yet conform to these
specs.  Part of this is due to the fact that the coding style has been
evolving slightly over the course of the project.  Some of the code you
see in these directories is 5 years old, and things have gotten cleaner
since then.  Don't worry - it'll get cleaned up the next time something
in the vicinity gets a visit.

Memory leak checking
^^^^^^^^^^^^^^^^^^^^

I can't say enough good things about valgrind.  If you do anything with
dynamic memory in your code, you need to use this.  Just compile with -g
and start the program inside valgrind.  Run it through the suspected
area and then exit cleanly.  valgrind will tell you if you've done
anything dodgy like freeing regions twice, reading uninitialized memory,
or if you've leaked memory anywhere.

http://valgrind.kde.org/[]

Conclusion
^^^^^^^^^^

The summary: please be kind to my eyes.  There's a lot of stuff in here.

Submitting patches
~~~~~~~~~~~~~~~~~~

Patches that arrive in unified format (diff -u) as plain text with no
HTML, no attachments and a brief summary at the top are the easiest to
handle. They show the context, explain what's going on, and get saved as
one message.  Everything stays together until it's time to merge.

Patches that arrive as attachments have to be moved around as separate
files - the body of the message is one, and the patch is in another.
This is not my preferred mode of operation.

When sending patches to the lists, be sure to add me as an explicit
recipient to make sure it is considered for merging.  A patch which only
goes to a list is generally treated as a RFC and is relatively low
priority.

If your mailer is brain dead and rewrites tabs into spaces, wraps your
patch body, or anything else like that, just attach the patch.  I'd
rather deal with an attachment instead of a patch that has tab damage,
rewrapped lines, or worse.

Patch cohesion
~~~~~~~~~~~~~~

Patches should have some kind of unifying element.  One patch set is one
message, and it should all touch similar things.  If you have to edit 6
files to add support for neutrino detection in UPS hardware, that's
fine.

However, sending one huge patch that does massive separate changes
all over the tree is not recommended.  That kind of patch has to be
split up and evaluated separately, assuming I care enough to do that
instead of just dropping it.

If you have to make big changes in lots of places, send multiple
patches - one per item.

Man pages
~~~~~~~~~

If you change something that involves an argument to a program or
configuration file parsing, the man page is probably now out of date.
If you don't update it, I have to, and I have enough to do as it is.

If you write a new driver, send in the man page when you send me the
source code for your driver.  Otherwise, I will be forced to write a
skeletal man page that will probably miss many of the finer points of
the driver and hardware.

Repository etiquette and quality assurance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Please keep the SVN trunk in working condition at all times. The trunk
may be used to generate daily tarballs, and should not contain broken
code if possible. If you need to commit incremental changes that leave
the system in a broken state, please do so in a separate branch and
merge the changes back to the trunk once they are complete.

Before committing, please remember to:

* update the ChangeLog, if appropriate. Dates are listed in UTC 
  ("date --utc").

* run "make distcheck-light". This checks that the Makefiles are not
  broken, that all the relevant files are distributed, and that there
  are no compilation or installation errors.

Running "make distcheck-light" is especially important if you have
added or removed files, or updated configure.in or some Makefile.am.
Remember: simply adding a file to SVN does not mean it will be
distributed. To distribute a file, you must update the corresponding
Makefile.am.

There is also "make distcheck", which runs an even stricter set of
tests, but will not work unless you have all the optional libraries
and features installed.


Commands sent to the UPS drivers
--------------------------------

include commands.txt

[[new-drivers]]
Creating a new driver to support another UPS
---------------------------------------------

include new-drivers.txt

*Comment*
start by an intro on generic drivers?

- extending drivers
- Basic serial
- USB
- SNMP
- ... fenton, megatec=> blazer, ...

add sub notes on(?):
- outlet collection implementation
- ...whatever more has to be known

New command and variable naming scheme
--------------------------------------

include new-names.txt

Comment: this file should be renamed. it's not new anymore!

Creating new client
-------------------

*Comment* this content is to be created from scratch.

Intro idea: "NUT provides bindings, for several common languages, that are
presented below. If none suits you, you can implement one easily using the 
'Network protocol information'. This approach has been used to create the
Python PyNUT module and the Nagios check_ups plugin, which can serve as a
reference."

C / C++
~~~~~~~

Client access library
^^^^^^^^^^^^^^^^^^^^^
man/upsclient.3

Configuration helpers
^^^^^^^^^^^^^^^^^^^^^

NUT provides helper scripts to ease the configuration step of your program, by
detecting...

libupsclient-config.1
+ pkg-config

Python
~~~~~~

...
Comment: content from scripts/python/README
+ point scripts/python/module/test_nutclient.py

Perl
~~~~

Comment: The binding has to be tested and probably updated before we can
document it!
The content of this § is to be ripped from the http://search.cpan.org/dist/ups-nut/[UPS::Nut] module README:


[[protocol]]
Network protocol information
----------------------------

include protocol.txt

Ideas for future expansion and features (and improvement?)
----------------------------------------------------------

include ideas.txt

*Comments*

- check to refresh and integrate the https://alioth.debian.org/pm/?group_id=30602[tasks] list
and https://alioth.debian.org/tracker/?atid=411545&group_id=30602&func=browse[feature requests] list from Alioth
- add "Generic ?Ascii? driver": I've got to think more about that, but the recent
solar panel driver, and the powerman internal approach of a generic engine with
a scripting interface is a cool idea.
Ref http://powerman.svn.sourceforge.net/viewvc/powerman/trunk/etc/apcpdu.dev?revision=969&view=markup
- integrate the (future) new powerman LUA engine (maybe/mustbe used for the driver above?)
for native PDU support
- see how we can help and collaborate with DeviceKit-power



[[sock-protocol]]
Driver/server socket protocol
-----------------------------

include sock-protocol.txt
